name: Deploy Cloudformation - Preview

on:
  pull_request:
    types:
      - "opened"
      - "edited"
      - "synchronize"
  # push:
  #   branches-ignore:
  #     - main
  #   paths-ignore:
  #     - README.md
  #     - CHANGELOG.md  # Should never be edited anyway
  #     - .gitignore
  #     - .github/**
  #     - Jenkinsfile


env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE: ${{ secrets.AWS_ROLE }}
  AWS_STACK_NAME: ${{ vars.AWS_STACK_NAME }}

# Permission can be added at job level or workflow level    
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
  pull-requests: write
  deployments: write

jobs:
  set-env:
    name: Set Environment
    uses: ./.github/workflows/setup-env.yml
    secrets: inherit
  create-deployment:
    runs-on: ubuntu-latest
    name: Create Deployment in Github
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - uses: actions/checkout@v3
      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          environment: preview
          initial_status: "pending"
          ref: ${{ github.ref }}
  cloudformation-update:
    name: Update or Create Cloudformation Stack
    runs-on: ubuntu-latest
    needs: set-env
    steps: 
      - uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ env.AWS_ROLE }} #change to reflect your IAM role’s ARN
          role-session-name: ${{ needs.set-env.outputs.aws_session_name }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy to AWS CFN
        run: | 
          aws cloudformation deploy --template-file ./cloudformation/formation.yml \
          --stack-name=${{ needs.set-env.outputs.aws_stack_name }} \
          --tags BranchName=${{ github.ref }} \
          --no-fail-on-empty-changeset \
          --output text
      - name: Get Outputs from Stack
        run: |
          aws cloudformation describe-stacks --stack-name=${{ needs.set-env.outputs.aws_stack_name }} --output table
  build:
    needs: cloudformation-update
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v1
        with:
          node-version: 16.16.0
          cache: 'yarn'
          always-auth: true
      - run: npm install -g yarn
      - name: Cache NodeModules
        id: node-module-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Packages
        run: yarn install --frozen-lockfile
        if: steps.node-module-cache.outputs.cache-hit != 'true'
      - name: Build Application
        run: yarn build
      - name: Upload Next Static Build
        uses: actions/upload-artifact@master
        with:
          name: static-site-build
          path: ./out
  upload-s3:
    needs: 
      - build
      - set-env
    name: Upload Files to S3
    runs-on: ubuntu-latest
    outputs:
      website_url: ${{ steps.website_url.outputs.url }}
    steps:
      - uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ env.AWS_ROLE }} #change to reflect your IAM role’s ARN
          role-session-name: ${{ needs.set-env.outputs.aws_session_name }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Get Website URL
        id: website_url
        run: echo "url=$(echo "$(aws cloudformation describe-stacks --stack-name ${{ needs.set-env.outputs.aws_stack_name }} --query "Stacks[0].Outputs[1].OutputValue")" | tr -d \")" >> $GITHUB_OUTPUT
      - uses: actions/download-artifact@master
        with:
          name: static-site-build
          path: ./builds/out
      - id: query_bucket
        name: Get S3 Bucket Name
        run: |
          echo "::set-output name=BucketName::$(aws cloudformation describe-stacks --stack-name ${{ needs.set-env.outputs.aws_stack_name }} --query "Stacks[0].Outputs[2].OutputValue")"
      - name: Sync Files
        run: |
          aws s3 sync ./builds/out s3://${{ steps.query_bucket.outputs.BucketName }}
      - name: Comment Preview URL on PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: ${{ steps.website_url.outputs.url }}
          reactions: eyes, rocket
          pr_number: ${{github.event.number}}
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: static-site-build
  update-deployment:
    needs: [create-deployment, upload-s3]
    name: Update Deployment Status
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v3
      - name: Update Deployment - Success
        if: ${{ always() && contains(needs.*.result, 'success') }}
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: ${{ needs.upload-s3.outputs.website_url }}
          state: "success"
          deployment_id: ${{ needs.create-deployment.outputs.deployment_id }}
      - name: Update Deployment - Failure
        if: ${{ always() && contains(needs.*.result, 'failure') }}
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "failure"
          deployment_id: ${{ needs.create-deployment.outputs.deployment_id }}
